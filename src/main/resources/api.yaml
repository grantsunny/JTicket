openapi: 3.0.0
info:
  title: Seat Selection API
  description: API for booking seats and managing orders, with support for multiple seat bookings per order. Utilizes UUIDs for unique identification.
  version: 1.0.0

servers:
  - url: http://localhost:8080/api/
    description: localhost

paths:
  /events:
    get:
      summary: Get a list of all events
      operationId: listEvents
      parameters:
        - in: query
          name: venueId
          schema:
            type: string
          required: false
          description: venue the event performs.
      responses:
        '200':
          description: A list of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      summary: Create a new event
      operationId: createEvent
      parameters:
        - in: header
          name: X-Copy-From-Id
          schema:
            type: string
          required: false
          description: Optional eventId of the resource to copy seat pricing from.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: Event created successfully
          headers:
            Location:
              description: Location of the created resource
              schema:
                type: string
        '400':
          description: Invalid input
        '409':
          description: Venue is already booked for the selected time or venue not found
  /events/{eventId}:
    get:
      summary: Get a specific event by UUID
      operationId: getEventById
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
    patch:
      summary: Link a venue with an event
      operationId: assignVenueToEvent
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: linkVenue
              properties:
                venueId:
                  type: string
                  format: uuid
      responses:
        '202':
          description: Venue associated with event successfully
        '400':
          description: Invalid input
        '404':
          description: Event not found
        '409':
          description: Venue is already booked for the selected time or venue not found
    put:
      summary: update event
      operationId: updateEvent
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '204':
          description: event updated successfully
        '400':
          description: Invalid input
        '404':
          description: Event not found
        '409':
          description: Venue is already booked for the selected time or venue not found
    delete:
      summary: deleteEvent
      operationId: deleteEvent
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Event deleted successfully
        '409':
          description: Event failed due to constraints
        '404':
          description: Event not found

  /events/{eventId}/sessions:
    get:
      operationId: listSessions
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: list sessions under one event
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
    post:
      operationId: createSession
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        '201':
          description: Session created successfully
          headers:
            Location:
              description: Location of the created resource
              schema:
                type: string
        '400':
          description: Invalid input
        '409':
          description: Duplicated session (name) found
  /events/{eventId}/sessions/{sessionId}:
    get:
      operationId: getSession
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: One session according eventId and sessionId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
    put:
      operationId: updateSession
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        '204':
          description: session updated successfully
        '400':
          description: invalid input
        '404':
          description: session not found
        '409':
          description: conflict name or event in session
    delete:
      operationId: deleteSession
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: session deleted successfully
        '400':
          description: invalid input
        '404':
          description: session not found
  /events/{eventId}/prices:
    get:
      summary: Get a list of prices available under given event
      operationId: listTicketPricesOfEvent
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A list of prices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Price'
    post:
      summary: create a new price for a given event
      operationId: createTicketPriceOfEvent
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Price'
      responses:
        '201':
          description: Price created successfully
          headers:
            Location:
              description: Location of the created resource
              schema:
                type: string
        '400':
          description: Invalid input
        '409':
          description: Duplicated price (Name) found

  /events/{eventId}/prices/{priceId}:
    get:
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: priceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      summary: Get one given ticket prices of a specific event
      operationId: getTicketPriceOfEvent
      responses:
        '200':
          description: Price details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'
        '404':
          description: Price not found
    delete:
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: priceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      summary: Remove one given ticket price of a specific event
      operationId: deleteTicketPriceOfEvent
      responses:
        '204':
          description: Price deleted successfully
        '409':
          description: Delete failed due to constraints
        '404':
          description: Price not found

  /events/{eventId}/venue:
    get:
      summary: Get the venue details for a specific event
      operationId: getVenueOfEvent
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Venue details for the event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
        '404':
          description: Event or venue not found

  /events/{eventId}/venue/svg:
    get:
      summary: Get areas layout in SVG format
      operationId: getEventVenueSvgLayout
      description: Retrieve details of a specific venue by event's UUID.
      parameters:
        - name: eventId
          in: path
          required: true
          description: Unique ID of the event
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: The areas layout in SVG format
          content:
            image/svg+xml:
              schema:
                type: string
                format: binary
        404:
          description: event or venue not found

  /events/{eventId}/pricing:
    get:
      summary: Get the default price of the event
      operationId: getDefaultPricingOfEvent
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Venue level price for the event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'
        '404':
          description: There is no venue level price for this event, or venue is not assigned.
    patch:
      summary: Assign a venue level price to the event.
      operationId: assignDefaultPricingOfEvent
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: linkPrice
              properties:
                priceId:
                  type: string
                  format: uuid
      responses:
        '202':
          description: Assigned the price successfully
        '400':
          description: Invalid input
        '404':
          description: Event not found, or not associated with venue

  /events/{eventId}/areas:
    get:
      summary: List areas in a event
      operationId: getAllAreasInEvent
      description: Retrieve a list of areas of the venue, within a specific event.
      parameters:
        - name: eventId
          in: path
          required: true
          description: Unique ID of the event
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: A list of areas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Area'
        404:
          description: Event not found, or not mapped with any venue yet

  /events/{eventId}/areas/{areaId}:
    get:
      summary: Get a specific area in a venue mapped with an event.
      operationId: getAreaInEvent
      description: Retrieve details of a specific area within a venue.
      parameters:
        - name: eventId
          in: path
          required: true
          description: Unique ID of the event
          schema:
            type: string
            format: uuid
        - name: areaId
          in: path
          required: true
          description: Unique ID of the area
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Details of a specific area
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
        404:
          description: Area not found

  /events/{eventId}/areas/{areaId}/pricing:
    get:
      summary: Get the area level price of the event
      operationId: getAreaLevelPricingOfEvent
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: areaId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Venue level price for the event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'
        '404':
          description: There is no venue level price for this event, or venue is not assigned.
    patch:
      summary: Assign a area level price to the event.
      operationId: assignAreaLevelPricingOfEvent
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: areaId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: linkPrice
              properties:
                priceId:
                  type: string
                  format: uuid
      responses:
        '202':
          description: Assigned the price successfully
        '400':
          description: Invalid input
        '404':
          description: Event not found, or not associated with venue

  /events/{eventId}/areas/{areaId}/seats:
    get:
      summary: List seats in an area of a venue (SKU)
      operationId: getAllSeatsInAreaOfEvent
      description: Retrieve a list of seats within a specific area of a specific event.
      parameters:
        - name: eventId
          in: path
          required: true
          description: Unique ID of the event
          schema:
            type: string
            format: uuid
        - name: areaId
          in: path
          required: true
          description: Unique ID of the area
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: A list of seats within the area
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Seat'
        404:
          description: Area or Venue not found

  /events/{eventId}/seats/{seatId}:
    get:
      summary: Get a specific seat with details (SKU) under given event
      operationId: getSeatInEvent
      description: Retrieve details of a specific seat by its UUID.
      parameters:
        - name: eventId
          in: path
          required: true
          description: Unique UUID of the event
          schema:
            type: string
            format: uuid
        - name: seatId
          in: path
          required: true
          description: Unique UUID of the seat
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Details of a specific seat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seat'
        '404':
          description: Seat not found

  /events/{eventId}/seats/{seatId}/pricing:
    get:
      summary: Get the seat level price of the event
      operationId: getSeatLevelPricingOfEvent
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: seatId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Seat level price for the event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'
        '404':
          description: There is no venue level price for this event, or venue is not assigned.
    patch:
      summary: Assign a seat level price to the event.
      operationId: assignSeatLevelPricingOfEvent
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: seatId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: linkPrice
              properties:
                priceId:
                  type: string
                  format: uuid
      responses:
        '202':
          description: Assigned the price successfully
        '400':
          description: Invalid input
        '404':
          description: Event not found, or not associated with venue

  /events/{eventId}/orders:
    get:
      summary: Get all the orders of a given event
      operationId: getEventOrders
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: Event not found
          
  /venues:
    get:
      summary: List all venues
      operationId: getAllVenues
      description: Retrieve a list of all venues.
      responses:
        200:
          description: A list of venues
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Venue'

  /venues/{venueId}:
    get:
      summary: Get specific venue
      operationId: getVenue
      description: Retrieve details of a specific venue by its UUID.
      parameters:
        - name: venueId
          in: path
          required: true
          description: Unique ID of the venue
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Details of a specific venue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
        404:
          description: Venue not found

  /venues/{venueId}/areas:
    get:
      summary: List areas in a venue
      operationId: getAllAreasInVenue
      description: Retrieve a list of areas within a specific venue.
      parameters:
        - name: venueId
          in: path
          required: true
          description: Unique ID of the venue
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: A list of areas within the venue
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Area'

  /venues/{venueId}/svg:
    get:
      summary: Get areas layout in SVG format
      operationId: getVenueSvgLayout
      description: Retrieve details of a specific venue by its UUID.
      parameters:
        - name: venueId
          in: path
          required: true
          description: Unique ID of the venue
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: The areas layout in SVG format
          content:
            image/svg+xml:
              schema:
                type: string
                format: binary
        404:
          description: Venue not found

  /venues/{venueId}/areas/{areaId}:
    get:
      summary: Get a specific area in a venue
      operationId: getAreaInVenue
      description: Retrieve details of a specific area within a venue.
      parameters:
        - name: venueId
          in: path
          required: true
          description: Unique ID of the venue
          schema:
            type: string
            format: uuid
        - name: areaId
          in: path
          required: true
          description: Unique ID of the area
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Details of a specific area
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
        404:
          description: Area not found

  /venues/{venueId}/areas/{areaId}/seats:
    get:
      summary: List seats in an area of a venue
      operationId: getAllSeatsInAreaOfVenue
      description: Retrieve a list of seats within a specific area of a specific venue.
      parameters:
        - name: venueId
          in: path
          required: true
          description: Unique ID of the venue
          schema:
            type: string
            format: uuid
        - name: areaId
          in: path
          required: true
          description: Unique ID of the area
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: A list of seats within the area
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Seat'
        404:
          description: Area or Venue not found

  /seats:
    get:
      summary: Get all seats or filter by venue and area
      operationId: getAllSeats
      description: Retrieve a list of all seats with their current status. Optionally, filter seats by area using the `areaId` query parameter.
      parameters:
        - name: venueId
          in: query
          schema:
            type: string
            format: uuid
          required: true
          description: Required UUID of the venue to filter seats by.
        - name: areaId
          in: query
          schema:
            type: string
            format: uuid
          required: false
          description: Optional UUID of the area to filter seats by.

      responses:
        '200':
          description: A list of seats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Seat'

  /seats/{seatId}:
    get:
      summary: Get a specific seat
      operationId: getSeat
      description: Retrieve details of a specific seat by its UUID.
      parameters:
        - name: seatId
          in: path
          required: true
          description: Unique UUID of the seat
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Details of a specific seat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seat'
        '404':
          description: Seat not found

  /orders:
    get:
      summary: Get a list of orders
      operationId: getAllOrders
      description: Retrieve a list of orders within an optional time range. Filter orders by creation timestamp using query parameters.
      parameters:
        - name: x-ticket-userId
          in: cookie
          schema:
            type: string
          required: false
          description: If there is userId in cookie, will return orders under given user
        - name: x-ticket-userId
          in: header
          schema:
            type: string
          required: false
          description: If there is userId in cookie, will return orders under given user
        - name: startTime
          in: query
          schema:
            type: string
            format: date-time
          required: false
          description: Optional start timestamp for filtering orders.
        - name: endTime
          in: query
          schema:
            type: string
            format: date-time
          required: false
          description: Optional end timestamp for filtering orders.
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

    post:
      summary: Create an order
      operationId: createOrder
      description: Create a new order with multiple seat selections. Returns the created order with payment details.
      parameters:
        - name: x-ticket-userId
          in: cookie
          schema:
            type: string
          required: false
          description: If there is userId in cookie, will use this userId to create order; otherwise the body shall contain the userId.
        - name: x-ticket-userId
          in: header
          schema:
            type: string
          required: false
          description: If there is userId in cookie, will return orders under given user
      requestBody:
        description: Order creation request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request

  /orders/{orderId}:
    get:
      summary: Get a specific order
      operationId: getOrder
      description: Retrieve details of a specific order by its UUID.
      parameters:
        - name: x-ticket-userId
          in: cookie
          schema:
            type: string
          required: false
          description: If there is userId in cookie, getting order does not belong to user will get 404.
        - name: x-ticket-userId
          in: header
          schema:
            type: string
          required: false
          description: If there is userId in cookie, will return orders under given user
        - name: orderId
          in: path
          required: true
          description: Unique UUID of the order
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Details of a specific order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

    patch:
      summary: Accomplish a payment to a order
      operationId: payOrder
      parameters:
        - name: x-ticket-userId
          in: cookie
          schema:
            type: string
          required: false
          description: If there is userId in cookie, payment order does not belong to user will fail with 404.
        - name: x-ticket-userId
          in: header
          schema:
            type: string
          required: false
          description: If there is userId in cookie, will return orders under given user
        - name: orderId
          in: path
          required: true
          description: Unique UUID of the order
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: payment
              properties:
                paidAmount:
                  type: integer
      responses:
        '202':
          description: Payment accepted
        '400':
          description: Invalid input
        '404':
          description: order not found

    delete:
      summary: Cancel an order
      operationId: cancelOrder
      description: Cancel a specific order by marking it as unpaid. Can only cancel orders that are not paid.
      parameters:
        - name: x-ticket-userId
          in: cookie
          schema:
            type: string
          required: false
          description: If there is userId in cookie, cancel order does not belong to user will fail with 404.
        - name: x-ticket-userId
          in: header
          schema:
            type: string
          required: false
          description: If there is userId in cookie, will return orders under given user
        - name: orderId
          in: path
          required: true
          description: Unique UUID of the order to cancel
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Order canceled successfully
        '404':
          description: Order not found or already paid
        '500':
          description: Internal server error

components:
  schemas:
    Event:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        venueId:
          type: string
          format: uuid
        metadata:
          type: object
          additionalProperties: true  # Allows any set of properties

    Session:
      type: object
      required:
        - eventId
        - name
        - startTime
        - endTime
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        eventId:
          type: string
          format: uuid
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true  # Allows any set of properties

    Price:
      type: object
      required:
        - name
        - eventId
        - price
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        eventId:
          type: string
          format: uuid
        price:
          type: integer

    Venue:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        metadata:
          type: object
          additionalProperties: true

    Area:
      type: object
      properties:
        id:
          type: string
          format: uuid
        venueId:
          type: string
          format: uuid
        name:
          type: string
        metadata:
          type: object
          additionalProperties: true

    Seat:
      type: object
      required:
        - areaId
        - name
        - row
        - col
        - available
      properties:
        id:
          type: string
          format: uuid
        venueId:
          type: string
          format: uuid
          description: Unique ID of the venue to which this seat belongs
        areaId:
          type: string
          format: uuid
          description: Unique ID of the area to which this seat belongs
        row:
          type: integer
        col:
          type: integer
        available:
          type: boolean
        metadata:
          type: object
          additionalProperties: true

    Order:
      type: object
      required:
        - eventId
        - seats
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the order (UUID).
        userId:
          type: string
          description: UserId (the format is still TBD)
        eventId:
          type: string
          format: uuid
          description: Unique ID of the event booked in the order. (Required)
        sessionId:
          type: string
          format: uuid
          description: Unique ID of the event booked in the order. (Required)
        seats:
          type: array
          items:
            type: object
            properties:
              seatId:
                type: string
                format: uuid
              metadata:
                type: object
                additionalProperties: true
          description: An array of seats with metadata (perhaps QR code, etc) booked in the order. (Required)
        paidAmount:
          type: integer
          description: The total amount of the order to pay. (in *cents*)
        timestamp:
          type: string
          format: date-time
          description: Timestamp indicating when the order was created.
        metadata:
          type: object
          additionalProperties: true
